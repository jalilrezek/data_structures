The height of the child after a rotation, that is the node that becomes the new parent, is always
1 + what it was originally. (Or is it? Since |bf| never > 2, maybe yes. Either way it simply depends.
Actually yes, because if this is the subtree being rotated, it's the one that was greater before.)
The height of the node replaced depends entirely on its subtrees. If it has a subtree whose height is
2 or more less than the subtree in which the rotation occurs, its height will be reduced by 2. (Consider the
case where it has no children on one side, doing one rotation - clearly can see it.) On the other hand,
if its subtree where the rotation doesn't occur is taller enough than the subtree where the rotation
occurs, then its height is in fact unchanged.

A catchall setHeight() function that sets the height to the max of the two subtrees, + 1,
would be effective in all cases, I think.

insertRightRotation()
In insert() reached end of recursion
In insert() going to recurse left
In insert() reached end of recursion
Entered check rotations0
in check rotations, child is not null
end of insert(). Root height: 2 root bf: 1
In insert() going to recurse left
In insert() going to recurse left
In insert() reached end of recursion
Entered check rotations0
in check rotations, child is not null
end of insert(). Root height: 2 root bf: 1
Entered check rotations2
in check rotations, child is not null
entered right rotation
end of insert(). Root height: 1 root bf: 0

TwoRightRotations()
In insert() reached end of recursion
In insert() going to recurse left
In insert() reached end of recursion
Entered check rotations0
in check rotations, child is not null
end of insert(). Root height: 2 root bf: 1
In insert() going to recurse right
In insert() reached end of recursion
Entered check rotations2
in check rotations, child is not null
end of insert(). Root height: 2 root bf: 0

/////////////////////////////// REPETITIOUS USE OF CHECKROTATIONSHELPER() START //////////////////////////////////////

On the repetitious of the "checkRotationsHelper" function twice, once with (child, child.left) and the other with
(child, child.right):

The difficulty can be visualized with the situation in my test removeLeftRotationComplex(). Trace the code.
When we're at the Node P, we reach remove(node) function which takes one argument. It finds the max in P's left subtree, N.
It sets P's key to N's key, N.
--Then we return that updated node from remove(node)
--Then we reach remove(node, child) where cmp == 0. (2nd layer of recursion in this example)  Here we just return
  the updated node itself.
--Then we are back in remove(node, child) first layer. M.left = the new updated child N.

Now. Can I somehow call checkRotations() on the updated child N?
--Which child of the new N (used to be P) is passed in?
-- The old P was passed into remove(node). The information of what was returned, whether P's left or right or max(left),
is unknown and may be hard to trace.

Therefore, maybe I have to call checkRotations() twice for the updated child.
--checkRotations(updated child, updated child.left)
--checkRotations(updated child, updated child.right)

There's a chance that the updated child was actually set to null. So checkRotations(node, child) must check for whether
its input is null.

checkRotations() will run this check, and also check if the inputted root is a leaf.
-- Then it runs the preliminary checks to see if the inputted child was null.
-- If we get to preliminaryCheck(), then there is a non-null child. If the inputted child was null, child becomes
the other child which is not null
-- Otherwise, if original child is not null, it remains what it was originally.

REALIZATION: In my code, if I run checkRotations(node, node.left) and checkRotations(node, node.right) separately,
in that order, or reverse, doesn't matter, there will possibly be situations where I am looking at the wrong node
and rotating around that one instead.
The solution is to only rotate based on the node with the GREATER HEIGHT.
This eliminates the need to do all the elaborate checks for which node to set "child" as in checkRotations().
This in turn may solve the issue discussed here, the redundancy - you only need to rotate considering the child with
greater height. Then, you only do checkRotations() once.

